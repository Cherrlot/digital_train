// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:digital_train/model/knowledge_entity.dart';
import 'package:digital_train/model/lesson_entity.dart';
import 'package:digital_train/model/lesson_type_entity.dart';
import 'package:digital_train/model/login_entity.dart';
import 'package:digital_train/model/machine_entity.dart';
import 'package:digital_train/model/message_entity.dart';
import 'package:digital_train/model/rank_entity.dart';
import 'package:digital_train/model/stage_entity.dart';
import 'package:digital_train/model/study_map_entity.dart';
import 'package:digital_train/model/test_result_entity.dart';
import 'package:digital_train/model/test_topic_entity.dart';
import 'package:digital_train/model/upload_image_entity.dart';
import 'package:digital_train/model/user_info_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<KnowledgeEntity>[] is M) {
      return data.map<KnowledgeEntity>((Map<String, dynamic> e) => KnowledgeEntity.fromJson(e)).toList() as M;
    }
    if (<KnowledgeArticles>[] is M) {
      return data.map<KnowledgeArticles>((Map<String, dynamic> e) => KnowledgeArticles.fromJson(e)).toList() as M;
    }
    if (<LessonEntity>[] is M) {
      return data.map<LessonEntity>((Map<String, dynamic> e) => LessonEntity.fromJson(e)).toList() as M;
    }
    if (<LessonTypeEntity>[] is M) {
      return data.map<LessonTypeEntity>((Map<String, dynamic> e) => LessonTypeEntity.fromJson(e)).toList() as M;
    }
    if (<LoginEntity>[] is M) {
      return data.map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e)).toList() as M;
    }
    if (<MachineEntity>[] is M) {
      return data.map<MachineEntity>((Map<String, dynamic> e) => MachineEntity.fromJson(e)).toList() as M;
    }
    if (<MessageEntity>[] is M) {
      return data.map<MessageEntity>((Map<String, dynamic> e) => MessageEntity.fromJson(e)).toList() as M;
    }
    if (<RankEntity>[] is M) {
      return data.map<RankEntity>((Map<String, dynamic> e) => RankEntity.fromJson(e)).toList() as M;
    }
    if (<StageEntity>[] is M) {
      return data.map<StageEntity>((Map<String, dynamic> e) => StageEntity.fromJson(e)).toList() as M;
    }
    if (<StudyMapEntity>[] is M) {
      return data.map<StudyMapEntity>((Map<String, dynamic> e) => StudyMapEntity.fromJson(e)).toList() as M;
    }
    if (<TestResultEntity>[] is M) {
      return data.map<TestResultEntity>((Map<String, dynamic> e) => TestResultEntity.fromJson(e)).toList() as M;
    }
    if (<TestTopicEntity>[] is M) {
      return data.map<TestTopicEntity>((Map<String, dynamic> e) => TestTopicEntity.fromJson(e)).toList() as M;
    }
    if (<TestTopicItems>[] is M) {
      return data.map<TestTopicItems>((Map<String, dynamic> e) => TestTopicItems.fromJson(e)).toList() as M;
    }
    if (<TestTopicItemsBank>[] is M) {
      return data.map<TestTopicItemsBank>((Map<String, dynamic> e) => TestTopicItemsBank.fromJson(e)).toList() as M;
    }
    if (<TestTopicItemsOption>[] is M) {
      return data.map<TestTopicItemsOption>((Map<String, dynamic> e) => TestTopicItemsOption.fromJson(e)).toList() as M;
    }
    if (<UploadImageEntity>[] is M) {
      return data.map<UploadImageEntity>((Map<String, dynamic> e) => UploadImageEntity.fromJson(e)).toList() as M;
    }
    if (<UserInfoEntity>[] is M) {
      return data.map<UserInfoEntity>((Map<String, dynamic> e) => UserInfoEntity.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (KnowledgeEntity).toString(): KnowledgeEntity.fromJson,
    (KnowledgeArticles).toString(): KnowledgeArticles.fromJson,
    (LessonEntity).toString(): LessonEntity.fromJson,
    (LessonTypeEntity).toString(): LessonTypeEntity.fromJson,
    (LoginEntity).toString(): LoginEntity.fromJson,
    (MachineEntity).toString(): MachineEntity.fromJson,
    (MessageEntity).toString(): MessageEntity.fromJson,
    (RankEntity).toString(): RankEntity.fromJson,
    (StageEntity).toString(): StageEntity.fromJson,
    (StudyMapEntity).toString(): StudyMapEntity.fromJson,
    (TestResultEntity).toString(): TestResultEntity.fromJson,
    (TestTopicEntity).toString(): TestTopicEntity.fromJson,
    (TestTopicItems).toString(): TestTopicItems.fromJson,
    (TestTopicItemsBank).toString(): TestTopicItemsBank.fromJson,
    (TestTopicItemsOption).toString(): TestTopicItemsOption.fromJson,
    (UploadImageEntity).toString(): UploadImageEntity.fromJson,
    (UserInfoEntity).toString(): UserInfoEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}